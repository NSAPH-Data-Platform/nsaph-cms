medicare:
  reference: ""
  header: false
  quoting: 3
  index: "unless excluded"
  schema: "medicare"
  schema.audit: "medicare_audit"
  description: "Data model for Medicare"
  tables:
    ps:
      description: |
        Patient Summary view. Combines multiple patient summary (aka MBSF)
        files into a single view, transforming columns to the same type
      create:
        type: view
        from:
          - cms.mbsf_ab*
          - cms.mcr_bene_*
#        exclude:
#          - mbsf_ab_2015
      columns:
        - bene_id
        - file
        - record
        - year:
            source: '(CASE WHEN "year"::int < 20 THEN (2000 + "year"::int) WHEN (20 < "year"::int AND "year"::int < 100) THEN (1900 + "year"::int) WHEN "year" IS NULL THEN 2000 ELSE "year"::int END)'
        - state:
            source: '(SELECT state_id FROM public.us_states as s WHERE s.ssa2 = "state")'
        - ssa2:
            source: state
            description: Social Security Administration (SSA) two digit code for state
            reference: https://www.nber.org/research/data/ssa-federal-information-processing-series-fips-state-and-county-crosswalk
        - fips2:
            source: '(SELECT fips2 FROM public.us_states as s WHERE s.ssa2 = "state")'
            description: 2 digit state FIPS, see https://en.wikipedia.org/wiki/Federal_Information_Processing_Standard_state_code
            reference:  https://www.census.gov/library/reference/code-lists/ansi.html#state
        - zip:
            type: INT
            description: US Postal ZIP code, the first 5 digits of it
            cast:
              numeric: "(CASE WHEN {column_name} < 100000 THEN {column_name}::int ELSE ({column_name}/10000)::INT END)"
              "character varying": "SUBSTRING({column_name} FROM 1 FOR 5)::INT"
              integer: "{column_name}::INT"
        - zip4:
            type: INT
            description: Additional 4 digits for US zip 5+4 code, when provided
            source: zip
            cast:
              numeric: "(CASE WHEN {column_name} < 100000 THEN NULL ELSE ({column_name}%10000)::INT END)"
              "character varying": "(CASE WHEN LENGTH({column_name}) < 6 THEN NULL ELSE SUBSTRING({column_name} FROM 6 FOR 4)::INT END)"
              integer: "{column_name}::INT"
        - dob:
            type: date
            description: Date of birth
            cast:
              "character varying": "public.parse_date({column_name})"
              numeric: "to_date(to_char({column_name}, '00000000'), 'YYYYMMDD')"
            source:
              - dob
              - bene_dob
              - bene_birth_dt
        - age:
            type: INT
            description: Age on January 1 of a given year, if provided
            optional: true
            source: age
        - yob:
            type: INT
            description: Year, claculated from age
            optional: true
            source: "(year - age)"
        - dod:
            type: date
            description: Date of beneficiary death, if available
            cast:
              "character varying": "(CASE WHEN {column_name} = '00000000' THEN NULL ELSE public.parse_date({column_name}) END)"
              numeric: "(CASE WHEN {column_name} < 19000000 THEN NULL ELSE to_date(to_char({column_name}, '00000000'), 'YYYYMMDD') END)"
            source:
              - death_dt
              - bef_dod
              - bene_dod
              - bene_death_dt
        - ssa3:
            optional: true
            description: Social Security Administration (SSA) three digit code for county
            reference: https://www.nber.org/research/data/ssa-federal-information-processing-series-fips-state-and-county-crosswalk
            source:
              - cnty_cd
              - bene_county_cd
              - ssa_county
        - sex:
            reference: https://resdac.org/cms-data/variables/sex-beneficiary-0
            type: VARCHAR
            cast:
              '*': "{column_name}::VARCHAR"
            source:
              - sex
              - bene_sex_ident_cd
        - race:
            reference: https://resdac.org/cms-data/variables/beneficiary-race-code-ffs
            type: VARCHAR
            cast:
              '*': "{column_name}::VARCHAR"
            source:
              - bene_race_cd
              - race
        - dod_ndi:
            description: This variable is the date of death as reported on the Beneficiaryâ€™s death certificate.
            reference: https://resdac.org/cms-data/variables/ndi-date-deathmbsf
            optional: true
            source:  ndi_death_dt
        - race_rti:
            description: Research Triangle Institute (RTI) Race Code
            reference: https://resdac.org/cms-data/variables/research-triangle-institute-rti-race-code
            optional: true
            source: rti_race_cd
    ip:
      description: |
        Inpatient Adminissions view. Combines multiple inpatient admissions
        files (aka MedPar) into a single view, transforming columns
        to the same type
      create:
        type: view
        from:
          - cms.medpar_*
          - cms.mcr_ip_*
        exclude:
          - medpar_2015
      columns:
        - bene_id
        - file
        - record
        - year:
            source: '(CASE WHEN "year"::int < 20 THEN (2000 + "year"::int) WHEN (20 < "year"::int AND "year"::int < 100) THEN (1900 + "year"::int) WHEN "year" IS NULL THEN 2000 ELSE "year"::int END)'
        - state:
            source: '(SELECT state_id FROM public.us_states as s WHERE s.ssa2 = "state")'
        - ssa2:
            source: state
        - fips2:
            source: '(SELECT fips2 FROM public.us_states as s WHERE s.ssa2 = "state")'
        - zip:
            type: INT
            cast:
              numeric: "(CASE WHEN {column_name} < 100000 THEN {column_name}::int ELSE ({column_name}/10000)::INT END)"
              "character varying": "SUBSTRING({column_name} FROM 1 FOR 5)::INT"
        - zip4:
            type: INT
            source: zip
            cast:
              numeric: "(CASE WHEN {column_name} < 100000 THEN NULL ELSE ({column_name}%10000)::INT END)"
              "character varying": "(CASE WHEN LENGTH({column_name}) < 6 THEN NULL ELSE SUBSTRING({column_name} FROM 6 FOR 4)::INT END)"
        - admission_date_raw:
            type: VARCHAR
            cast:
              numeric: "TRIM(to_char({column_name}, '999999999'))"
              '*': "{column_name}::VARCHAR"
            source:
              - medpar_admsn_dt
              - admsn_dt
              - admsndt
        - admission_date:
            type: DATE
            cast:
              "character varying": "public.parse_date({column_name})"
              numeric: "public.parse_date({column_name})"
            source:
              - medpar_admsn_dt
              - admsn_dt
              - admsndt

        - discharge_date_raw:
            type: VARCHAR
            cast:
              numeric: "TRIM(to_char({column_name}, '999999999'))"
              '*': "{column_name}::VARCHAR"
            source:
              - medpar_dschrg_dt
              - dschrg_dt
              - dschrgdt
        - discharge_date:
            type: DATE
            cast:
              "character varying": "public.parse_date({column_name})"
              numeric: "public.parse_date({column_name})"
            source:
              - medpar_dschrg_dt
              - dschrg_dt
              - dschrgdt

        - adm_day_of_week:
            type: INT
            cast:
              "character varying": "{column_name}::INT"
              numeric: "{column_name}::INT"
            source:
              - medpar_admsn_day_cd
              - admsn_day_cd
              - admsnday

        - diag[$n=1:25]:
            type: varchar
            optional: true
            source:
              - medpar_dgns_cd_$n
              - dgns_cd0$n
              - dgns_cd$n
              - dgns_$n_cd
              - dgnscd$n
    _ps:
      description: internal intermediate view adding some data conversions
      create:
        type: view
        select: |
          *,
          CASE WHEN ssa3 is NOT NULL THEN
            CASE WHEN year > 2010 THEN
                (SELECT fips3 from public.ssa as s where ps.ssa3 = s.ssa3 and ps.year = s.year and ps.fips2 = s.fips2 ORDER BY 1 DESC LIMIT 1)
              ELSE
                (SELECT fips3 from public.ssa as s where ps.ssa3 = s.ssa3 and 2003 = s.year and ps.fips2 = s.fips2 ORDER BY 1 DESC LIMIT 1)
            END
          ELSE
            (SELECT public.zip_to_fips3(year, zip))
          END AS fips3,
          CASE WHEN ssa3 is NOT NULL THEN
              False
            ELSE
              (SELECT NOT public.is_zip_to_fips_exact(year, zip))
          END AS fips3_is_approximated,
          CASE WHEN year > 2010 THEN (SELECT string_agg(distinct fips3::varchar, ',') from public.ssa as s where ps.ssa3 = s.ssa3 and ps.year = s.year and ps.fips2 = s.fips2)
              ELSE (SELECT string_agg(distinct fips3::varchar, ',') from public.ssa as s where ps.ssa3 = s.ssa3 and 2003 = s.year and ps.fips2 = s.fips2) END AS fips3_list
        from: ps
    _beneficiaries:
      description: internal intermediate view adding some data conversions
      create:
        type: view
        from: medicare.ps
        group by:
          - bene_id
      columns:
        - bene_id
        - dob:
            source: "MIN(dob)"
            identifier: true
        - dod:
            source: "MAX(dod)"
        - race:
            reference: "https://resdac.org/cms-data/variables/raceethnicity-msis"
            source: "string_agg(distinct race, ',')"
            identifier: true
        - sex:
            source: "string_agg(distinct sex, ',')"
            identifier: true
        - duplicates:
            source: >
              COUNT(distinct {identifiers}) +
              CASE (COUNT(DISTINCT dod) FILTER (WHERE dod is not null)) WHEN 0 THEN 0 ELSE COUNT(DISTINCT dod) FILTER (WHERE dod is not null) - 1 END
            description: "number of duplicate records for the beneficiary"
        - dob_latest:
            source: |
              CASE
                WHEN MAX(dob) <> MIN(dob) THEN  MAX(dob)
              END
        - dod_earliest:
            source: |
              CASE
                WHEN MIN(dod) <> MAX(dod) THEN MIN(dod)
              END
    _enrollments:
      description: |
        Internal intermediate view of beneficiary enrollments into
        Medicare program, by year and state of enrollment
      create:
        type: view
        from: medicare._ps
        group by:
          - bene_id
          - year
          - state
      columns:
        - bene_id
        - year
        - state
        - state_iso:
            source: "('US-' || state) "
        - fips2:
            source: MAX(fips2)
        - fips3:
            source: MAX(fips3)
        - fips3_is_approximated:
            source: every(fips3_is_approximated)
        - fips3_valdiated:
            source: public.validate_zip_fips(MAX(zip), MAX(fips2), MAX(fips3))
        - ssa2:
            source: MAX(ssa2)
        - ssa3:
            source: MAX(ssa3)
        - ssa2_list:
            source: "string_agg(distinct ssa2, ',')"
        - ssa3_list:
            source: "string_agg(distinct ssa3, ',')"
        - residence_county:
            source: MAX(fips3)
        - residence_counties:
            source: "string_agg(distinct fips3_list, ',')"
        - fips5:
            source: "(MAX(fips2) || MAX(fips3))"
        - zip:
            source: "MAX(zip)"
        - zips:
            source: "string_agg(distinct zip::varchar, ',')"
        - state_count:
            source: |
              (
                SELECT COUNT(distinct state)
                FROM medicare.ps AS ps2
                WHERE
                  _ps.bene_id = ps2.bene_id
                  AND _ps.year = ps2.year
              )
        - died:
            source: |
              CASE EXTRACT (YEAR from MAX(dod))
                WHEN year THEN TRUE
                ELSE FALSE
              END
        - file:
            source: "string_agg(distinct FILE, ',')"
        - record:
            source: "string_agg(distinct RECORD::VARCHAR, ',')"
    beneficiaries:
      description: |
        Cleaned up and unified Medicare beneficiaries table,
        indexed and optimized for efficient queries
      create:
        type: table
        select: "*"
        from: _beneficiaries
      columns:
        - bene:
            type: HLL_HASHVAL
            description: |
              HLL hash (see https://en.wikipedia.org/wiki/HyperLogLog).
              Can be sued to calculate number of beneficiaries
              satisfying a certain given condition
              Use #(hll_add_agg(bene)) or hll_cardinality(hll_add_agg(bene)) aggregator
            reference: https://github.com/citusdata/postgresql-hll/blob/master/REFERENCE.md#basic-operational-functions
            source:
              type: "generated"
              code: "GENERATED ALWAYS AS (hll_hash_text(bene_id)) STORED"
      primary_key:
        - bene_id
      indices:
        bene_rsd_idx:
          columns:
            - race
            - sex
            - duplicates
      children:
        enrollments:
          description: |
            Cleaned up and unified Medicare beneficiaries enrollments table,
            by satte and year. This table is indexed and optimized
            for efficient queries
          create:
            type: table
            select: "*"
            from: _enrollments
          columns:
            - bene:
                type: HLL_HASHVAL
                description: |
                  HLL hash (see https://en.wikipedia.org/wiki/HyperLogLog).
                  Can be sued to calculate number of beneficiaries
                  satisfying a certain given condition
                  Use #(hll_add_agg(bene)) or hll_cardinality(hll_add_agg(bene)) aggregator
                reference: https://github.com/citusdata/postgresql-hll/blob/master/REFERENCE.md#basic-operational-functions
                source:
                  type: "generated"
                  code: "GENERATED ALWAYS AS (hll_hash_text(bene_id)) STORED"
          primary_key:
            - bene_id
            - year
            - state
          indices:
            bsy_idx:
              columns:
                - bene_id
                - state
                - year
            sy_idx:
              columns:
                - state
                - year
            fips_idx:
              columns:
                - fips2
                - fips3
            zc_idx:
              columns:
                - zip
                - fips5
            scz_idx:
              columns:
                - state
                - fips3
                - zip
          children:
            admissions:
              description: |
                Medicare inpatient admissions
              invalid.records:
                action: "INSERT"
                target:
                  schema: $schema.audit
              create:
                type: table
                select: |
                  bene_id,
                  file,
                  record,
                  year,
                  state,
                  ssa2,
                  fips2,
                  zip,
                  zip4,
                  admission_date_raw,
                  discharge_date_raw,
                  admission_date,
                  discharge_date,
                  adm_day_of_week,
                  diag1 As primary_diagnosis,
                  array_remove(ARRAY[diag1,
                  diag2,
                  diag3,
                  diag4,
                  diag5,
                  diag6,
                  diag7,
                  diag8,
                  diag9,
                  diag10,
                  diag11,
                  diag12,
                  diag13,
                  diag14,
                  diag15,
                  diag16,
                  diag17,
                  diag18,
                  diag19,
                  diag20,
                  diag21,
                  diag22,
                  diag23,
                  diag24,
                  diag25], NULL) As diagnoses
                from: ip
                populate: false
              columns:
                - admission_year:
                    type: "INT"
                    source:
                      type: "generated"
                      code: "GENERATED ALWAYS AS (EXTRACT (YEAR FROM admission_date)) STORED"
                - diagnoses:
                    type: "VARCHAR(12)[10]"
                    source: None
                - bene:
                    type: HLL_HASHVAL
                    description: |
                      HLL hash (see https://en.wikipedia.org/wiki/HyperLogLog).
                      Can be sued to calculate number of beneficiaries
                      satisfying a certain given condition
                      Use #(hll_add_agg(bene)) or hll_cardinality(hll_add_agg(bene)) aggregator
                    reference: https://github.com/citusdata/postgresql-hll/blob/master/REFERENCE.md#basic-operational-functions
                    source:
                      type: "generated"
                      code: "GENERATED ALWAYS AS (hll_hash_text(bene_id)) STORED"
                    index: false
                - pd_hll_hash:
                    type: HLL_HASHVAL
                    source:
                      type: "generated"
                      code: "GENERATED ALWAYS AS (hll_hash_text(primary_diagnosis)) STORED"
                    index: false
                - icd_hll:
                    type: HLL
                    source:
                      type: "generated"
                      code: "GENERATED ALWAYS AS (hll_arr_agg(diagnoses)) STORED"
                    index: false
              primary_key:
                - bene_id
                - year
                - state
                - admission_date
                - discharge_date
              indices:
                adm_ys_idx:
                  columns:
                    - state
                    - year
                adm_ysdz_idx:
                  columns:
                    - state
                    - year
                    - zip
                    - primary_diagnosis



